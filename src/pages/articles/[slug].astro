---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { Image, getImage } from 'astro:assets'
import { getCollection } from 'astro:content'
import Base from '../../layouts/base.astro'
import { createPlaceHolder } from '../../libs/createPlaceHolder.ts'

export const getStaticPaths = (async () => {
	const articles = await getCollection('articles')
	return articles.map((article) => ({
		params: {
			slug: article.slug
		},
		props: { article }
	}))
}) satisfies GetStaticPaths
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { article } = Astro.props

const { title, image, altImage, references: rawReferences } = article.data
const references = rawReferences?.filter((r) => r.image)
const { Content } = await article.render()
const placeHolder = await createPlaceHolder(image)
const referencesPlaceHolders = references
	? await Promise.all(references?.map((r) => createPlaceHolder(r.image!)))
	: []

const ogImage = await getImage({ src: image, width: 1200, height: 630, format: 'jpg' })
---

<Base {title} imageUrl={ogImage.src}>
	<article class="relative sm:pt-8 md:pt-16">
		<section class="grid items-center gap-4 px-8 md:grid-cols-2 lg:px-32">
			<div class="z-10 flex h-full flex-col justify-evenly">
				<h1 class="font-display text-5xl leading-normal lg:text-7xl">{title}</h1>
			</div>
			<div class="z-10">
				<Image
					src={image}
					alt={altImage ?? ''}
					class="mx-auto rounded-xl border-2 border-black bg-cover bg-no-repeat"
					width={500}
					style={`background-image:url("${placeHolder.src}")`}
				/>
			</div>
		</section>
		<svg
			id="svg1"
			version="1.1"
			viewBox="0 0 162 92"
			xmlns="http://www.w3.org/2000/svg"
			class="-mt-40 h-32 w-full bg-primary-50 fill-primary-300"
			preserveAspectRatio="none"
		>
			<path id="rect2" d="m0 0h162v92c-80.495-54.981-99.261-7.2988-162-64.538z"></path>
		</svg>
		<div class="bg-primary-50 pb-16 pt-24 lg:pt-36">
			<section class="prose mx-auto px-8 sm:prose-xl md:prose-2xl prose-headings:font-display">
				<Content />
			</section>
			{
				references && references.length > 0 && (
					<ul
						id="references"
						class=" mx-auto my-16 flex h-32 w-full gap-4 overflow-x-scroll pb-4 pl-8 pr-4 text-2xl  sm:h-48 sm:gap-8 sm:pl-16 sm:pr-8 md:h-64 md:gap-24 md:pl-60 md:pr-20"
					>
						{references.map(
							(ref, index) =>
								ref.image && (
									<li class="h-full w-48 flex-none overflow-hidden rounded-xl border-2 border-black sm:w-64 md:w-96">
										<a href={`/references/${article.slug}#${index}`} class="h-full ">
											<Image
												src={ref.image}
												alt={ref.title ?? ''}
												class="h-full bg-cover bg-no-repeat object-cover"
												style={`background-image:url("${referencesPlaceHolders[index].src}")`}
											/>
										</a>
									</li>
								)
						)}
					</ul>
				)
			}
		</div>
	</article>
</Base>
