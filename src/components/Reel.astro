---
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

export type Props = {
	images: {
		image: ImageMetadata
		alt?: string
	}[]
	slug: string
}

const { images, slug } = Astro.props
---

<c-reel class="block overflow-hidden py-8">
	<section class="mr-4 flex gap-8 px-4 sm:pl-24">
		{
			images.map(({ image, alt }, i) => (
				<a
					href={`/references/${slug}#${i}`}
					class="aspect-[4/3] h-52 sm:h-64 w-auto min-w-0 flex-shrink-0 overflow-hidden rounded-xl border-2 border-black"
				>
					<Image
						src={image}
						alt={alt ?? ''}
						class="h-full w-full object-cover"
					/>
				</a>
			))
		}
	</section>
	<section class="mt-8 flex justify-end gap-4 px-8">
		<button data-js="prev-btn" class="transition-opacity disabled:opacity-0">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="M15.75 19.5 8.25 12l7.5-7.5"></path>
			</svg>
		</button>
		<button data-js="next-btn" class="transition-opacity disabled:opacity-0">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
			</svg>
		</button>
	</section>
</c-reel>

<script>
	import Embla, { type EmblaCarouselType } from 'embla-carousel'
	customElements.define(
		'c-reel',
		class Carousel extends HTMLElement {
			#emblaApi: EmblaCarouselType
			#prevBtn: HTMLButtonElement | null
			#nextBtn: HTMLButtonElement | null
			constructor() {
				super()
				this.#emblaApi = Embla(this)
				this.#prevBtn = this.querySelector('button[data-js="prev-btn"')
				this.#nextBtn = this.querySelector('button[data-js="next-btn"')
			}
			connectedCallback() {
				this.#emblaApi
					.on('init', this.#toggleBtns)
					.on('reInit', this.#toggleBtns)
					.on('select', this.#toggleBtns)
				this.#prevBtn?.addEventListener('click', this.#handleClickPrev)
				this.#nextBtn?.addEventListener('click', this.#handleClickNext)
			}

			#handleClickPrev = () => {
				this.#emblaApi.scrollPrev()
			}

			#handleClickNext = () => {
				this.#emblaApi.scrollNext()
			}
			#toggleBtns = () => {
				this.#prevBtn?.toggleAttribute(
					'disabled',
					!this.#emblaApi.canScrollPrev()
				)
				this.#nextBtn?.toggleAttribute(
					'disabled',
					!this.#emblaApi.canScrollNext()
				)
			}
		}
	)
</script>
